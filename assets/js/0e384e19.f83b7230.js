"use strict";(self.webpackChunknode_git_server=self.webpackChunknode_git_server||[]).push([[9671],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),i=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},c=function(e){var n=i(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),h=i(t),d=o,m=h["".concat(l,".").concat(d)]||h[d]||u[d]||s;return t?r.createElement(m,p(p({ref:n},c),{},{components:t})):r.createElement(m,p({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,p=new Array(s);p[0]=h;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,p[1]=a;for(var i=2;i<s;i++)p[i]=t[i];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},9881:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>p,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const s={},p="Introduction",a={unversionedId:"intro",id:"intro",title:"Introduction",description:"Install",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/node-git-server/docs/intro",editUrl:"https://github.com/gabrielcsapo/node-git-server/edit/main/website/docs/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",next:{title:"API Reference",permalink:"/node-git-server/docs/"}},l=[{value:"Install",id:"install",children:[],level:2},{value:"Usage",id:"usage",children:[{value:"Simple",id:"simple",children:[],level:3},{value:"Sending logs",id:"sending-logs",children:[{value:"Authentication",id:"authentication",children:[],level:4}],level:3}],level:2},{value:"Example",id:"example",children:[],level:2}],i={toc:l};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("h2",{id:"install"},"Install"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npm install node-git-server\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("h3",{id:"simple"},"Simple"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Git } from 'node-git-server';\nimport { join } from 'path';\n\nconst port =\n  !process.env.PORT || isNaN(process.env.PORT)\n    ? 7005\n    : parseInt(process.env.PORT);\n\nconst repos = new Git(join(__dirname, '../repo'), {\n  autoCreate: true,\n});\n\nrepos.on('push', (push) => {\n  console.log(`push ${push.repo}/${push.commit} ( ${push.branch} )`);\n  push.accept();\n});\n\nrepos.on('fetch', (fetch) => {\n  console.log(`fetch ${fetch.commit}`);\n  fetch.accept();\n});\n\nrepos.listen(port, () => {\n  console.log(`node-git-server running at http://localhost:${port}`);\n});\n")),(0,o.kt)("p",null,"then start up the node-git-server server..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ node example/index.js\nnode-git-server running at http://localhost:7005\n")),(0,o.kt)("p",null,"meanwhile..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ git push http://localhost:7005/beep master\nCounting objects: 356, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (133/133), done.\nWriting objects: 100% (356/356), 46.20 KiB, done.\nTotal 356 (delta 210), reused 355 (delta 210)\nTo http://localhost:7005/beep\n * [new branch]      master -> master\n")),(0,o.kt)("h3",{id:"sending-logs"},"Sending logs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Git } from 'node-git-server';\nimport { join } from 'path';\n\nconst port =\n  !process.env.PORT || isNaN(process.env.PORT)\n    ? 7005\n    : parseInt(process.env.PORT);\n\nconst repos = new Git(join(__dirname, '../repo'), {\n  autoCreate: true,\n});\n\nrepos.on('push', async (push) => {\n  console.log(`push ${push.repo}/${push.commit} ( ${push.branch} )`);\n\n  push.log();\n  push.log('Hey!');\n  push.log('Checkout these other repos:');\n  for (const repo of await repo.list()) {\n    push.log(`- ${repo}`);\n  }\n  push.log();\n  push.accept();\n});\n\nrepos.on('fetch', (fetch) => {\n  console.log(`fetch ${fetch.commit}`);\n  fetch.accept();\n});\n\nrepos.listen(port, () => {\n  console.log(`node-git-server running at http://localhost:${port}`);\n});\n")),(0,o.kt)("p",null,"then start up the node-git-server server..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ node example/index.js\nnode-git-server running at http://localhost:7005\n")),(0,o.kt)("p",null,"meanwhile..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ git push http://localhost:7005/beep master\nCounting objects: 356, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (133/133), done.\nWriting objects: 100% (356/356), 46.20 KiB, done.\nTotal 356 (delta 210), reused 355 (delta 210)\nremote:\nremote: Hey!\nremote: Checkout these other repos:\nremote: - test.git\nremote:\nTo http://localhost:7005/test\n   77bb26e..22918d5  master -> master\n")),(0,o.kt)("h4",{id:"authentication"},"Authentication"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Git } from 'node-git-server';\nimport { join } from 'path';\n\nconst port =\n  !process.env.PORT || isNaN(process.env.PORT)\n    ? 7005\n    : parseInt(process.env.PORT);\n\nconst repos = new Git(join(__dirname, '../repo'), {\n  autoCreate: true,\n  autheficate: ({ type, user }, next) =>\n    type == 'push'\n      ? user(([username, password]) => {\n          console.log(username, password);\n          next();\n        })\n      : next(),\n});\n\nrepos.on('push', (push) => {\n  console.log(`push ${push.repo}/${push.commit} ( ${push.branch} )`);\n  push.accept();\n});\n\nrepos.on('fetch', (fetch) => {\n  console.log(`fetch ${fetch.commit}`);\n  fetch.accept();\n});\n\nrepos.listen(port, () => {\n  console.log(`node-git-server running at http://localhost:${port}`);\n});\n")),(0,o.kt)("p",null,"then start up the node-git-server server..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ node example/index.js\nnode-git-server running at http://localhost:7005\n")),(0,o.kt)("p",null,"meanwhile..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ git push http://localhost:7005/beep master\nCounting objects: 356, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (133/133), done.\nWriting objects: 100% (356/356), 46.20 KiB, done.\nTotal 356 (delta 210), reused 355 (delta 210)\nTo http://localhost:7005/beep\n * [new branch]      master -> master\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Running the following command will start up a simple http server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"node example/index.js\n")),(0,o.kt)("p",null,"If you want to try using https run the following"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"node example/index.js --https\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"When running https with self-signed certs there are two ways to override the git-clients behavior using ",(0,o.kt)("inlineCode",{parentName:"p"},"git config http.sslVerify false")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"git config --global http.sslCAInfo /path/to/cert.pem"))),(0,o.kt)("p",null,"For more information please visit the ",(0,o.kt)("a",{parentName:"p",href:"http://www.gabrielcsapo.com/node-git-server/code/index.html"},"docs")))}c.isMDXComponent=!0}}]);